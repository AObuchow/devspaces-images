#!/usr/bin/env groovy

import groovy.transform.Field

// PARAMETERS for this pipeline:
//   CONTAINERS
//   MIDSTM_BRANCH
//   FLOATING_QUAY_TAGS
//   OCP_VERSIONS
//   CLEAN_ON_FAILURE = "true"

def checkFailureQuay(arrayLines,errorOccurred)
{
    int numGoodLines=0
    arrayLines.each  { 
        line -> if (line?.toString().indexOf("No tags matching")>-1 || line?.toString().indexOf("ERROR")>-1) { 
            errorOccurred = errorOccurred + line + '\n'; 
            currentBuild.result = 'FAILURE'
        } else if (line?.toString().length()>=20) {
            numGoodLines++
        }
    }
    if (numGoodLines<1) {
        errorOccurred = errorOccurred + "[file is empty!]" + '\n'; 
        currentBuild.description+="; Could not load images from Quay!"
        currentBuild.result = 'FAILURE'
    }
    return errorOccurred
}

def errorOccurred = ""
@Field String DIFF_LATEST_IMAGES_QUAY_V_STORED = "trigger-update"

// TODO: for some reason, running getLatestImageTags.sh often returns null on cpt-ppc-006; so exclude 
def String nodeLabel = '(x86_64-rhel8||s390x-rhel8-perm||ppc64le-rhel8)&&!cpt-ppc-006'
currentBuild.description="Copying " + CONTAINERS + "..."
timeout(90) {
    node(nodeLabel) {
        sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/devspaces/'+ MIDSTM_BRANCH + '/product/util2.groovy')
        def util = load "${WORKSPACE}/util2.groovy"
        try { 
            stage("Copy from OSBS to Quay") {
                currentBuild.description="Copying: " + CONTAINERS.trim().replaceAll(" ",", ")
                wrap([$class: 'TimestamperBuildWrapper']) {
                    cleanWs()
                    DS_VERSION = util.getDsVersion(MIDSTM_BRANCH)
                    println "DS_VERSION = '" + DS_VERSION + "'"
                    sh (
                        script: 'curl -sSLO https://raw.githubusercontent.com/redhat-developer/devspaces/'+MIDSTM_BRANCH+'/product/getLatestImageTags.sh && chmod +x getLatestImageTags.sh',
                        returnStdout: true).trim().split( '\n' )

                    def NEW_NVR = ""
                    parallel copy_to_quay: {
                        def statusCode = sh(script: '''#!/bin/bash -xe
echo " ########################################### "
echo " Copy latest images in osbs to quay: ''' + CONTAINERS + '''"
echo " ########################################### "
for c in ''' + CONTAINERS + '''; do
    d=${c}
    # special case for operator and bundle; all other images follow the pattern
    # registry-proxy.engineering.redhat.com/rh-osbs/devspaces-operator:3.1-24
    # registry-proxy.engineering.redhat.com/rh-osbs/devspaces-operator-bundle:3.1-155
    if [[ $c == *"operator-bundle" ]]; then 
        d=operator-bundle
    elif [[ $c == *"operator" ]]; then 
        d=operator
    fi 
    ./getLatestImageTags.sh -b ''' + MIDSTM_BRANCH + ''' -c devspaces-${d} --osbs --hide --pushtoquay="''' + DS_VERSION + ''' ''' + FLOATING_QUAY_TAGS + '''" &
done
wait
                        ''', returnStatus: true)
                        if (statusCode > 0) {
                            errorOccurred = errorOccurred + 'error pushing to quay\n'; 
                            currentBuild.description+="; error pushing to quay!"
                            currentBuild.result = 'FAILURE'
                        }
                    }, 
                    nvr_check: {
                        NEW_NVR = sh (
                            script: "./getLatestImageTags.sh -b ${MIDSTM_BRANCH} --nvr --hide | tee ${WORKSPACE}/LATEST_IMAGES.nvr",
                            returnStdout: true).trim().split( '\n' )
                    }, 
                    get_latest_images: {
                        sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/devspaces/'+ MIDSTM_BRANCH + '/dependencies/LATEST_IMAGES')
                    }

                    def NEW_QUAY = ""
                    NEW_QUAY = sh (
                        script: "./getLatestImageTags.sh -b ${MIDSTM_BRANCH} --quay --tag ${DS_VERSION}- --hide | tee ${WORKSPACE}/LATEST_IMAGES.quay",
                        returnStdout: true).trim().split( '\n' )
                    errorOccurred = checkFailureQuay(NEW_QUAY, errorOccurred)

                    def LATEST_IMAGES_QUAY = sh (script: 'cat ${WORKSPACE}/LATEST_IMAGES.quay || true', returnStdout: true).trim()
                    if (!LATEST_IMAGES_QUAY?.trim() || LATEST_IMAGES_QUAY.trim().matches("file is empty")) { // file is empty so throw an error
                        println "ERROR: Could not load images from Quay!"
                        currentBuild.description+="; Could not load images from Quay!"
                        currentBuild.result = 'ABORTED'
                    }

                    sh (
                        script: 'curl -sSLO https://raw.githubusercontent.com/redhat-developer/devspaces/'+MIDSTM_BRANCH+'/product/getTagForImage.sh && chmod +x getTagForImage.sh',
                        returnStdout: true).trim().split( '\n' )

                    // diff quay tag list vs. nvr tag list
                    sh(script: '''#!/bin/bash -xe
${WORKSPACE}/getTagForImage.sh $(cat ${WORKSPACE}/LATEST_IMAGES.quay) -s > ${WORKSPACE}/LATEST_IMAGES.quay.tagsonly
${WORKSPACE}/getTagForImage.sh $(cat ${WORKSPACE}/LATEST_IMAGES.nvr)  -s > ${WORKSPACE}/LATEST_IMAGES.nvr.tagsonly
                    ''', returnStdout: true)
                    def DIFF_LATEST_IMAGES_QUAY_V_NVR = sh (
                        script: 'diff -u0 ${WORKSPACE}/LATEST_IMAGES.{quay,nvr}.tagsonly | grep -v "@@" | grep -v "LATEST_IMAGES" || true',
                        returnStdout: true
                    ).trim()

                    currentBuild.description="Copied: " + CONTAINERS.trim().replaceAll(" ",", ")
                    if (!DIFF_LATEST_IMAGES_QUAY_V_NVR.equals("")) {
                        // error! quay and nvr versions do not match
                        errorOccurred = errorOccurred + 'Error: Quay & Brew image versions not aligned:\n' + 
                        "=================== QUAY v NVR ===================\n" + 
                        DIFF_LATEST_IMAGES_QUAY_V_NVR + '\n' + 
                        ' Failure!\n'
                        currentBuild.description+="; Quay/Brew version mismatch"
                        currentBuild.result = 'UNSTABLE'
                        sh(script: '''#!/bin/bash -xe
./getLatestImageTags.sh -b ''' + MIDSTM_BRANCH + ''' --osbs --hide --pushtoquay="''' + DS_VERSION + ''' ''' + FLOATING_QUAY_TAGS + '''"
                        ''', returnStatus: true)
                        currentBuild.description+="; all Quay images updated"
                    }

                    DIFF_LATEST_IMAGES_QUAY_V_STORED = sh (
                        script: 'diff -u0 ${WORKSPACE}/LATEST_IMAGES{,.quay} | grep -v "@@" | grep -v "LATEST_IMAGES" || true',
                        returnStdout: true
                    ).trim()

                    def NEW_QUAY_L=""; NEW_QUAY.each { line -> if (line?.trim()) { NEW_QUAY_L=NEW_QUAY_L+"  ${line}\n" } }
                    def NEW_NVR_L="";  NEW_NVR.each  { line -> if (line?.trim()) { NEW_NVR_L=NEW_NVR_L + "  ${line}\n" } } 
                    echo '''
Quay Images:
''' + NEW_QUAY_L + '''

Brew NVRs:
''' + NEW_NVR_L
                    cleanWs(
                        cleanWhenSuccess: true,
                        cleanWhenUnstable: true,
                        cleanWhenNotBuilt: false,
                        cleanWhenFailure: CLEAN_ON_FAILURE,
                        cleanWhenAborted: true,
                        deleteDirs: true,
                        disableDeferredWipeout: true,
                        notFailBuild: true
                    )
                } // wrap 
            } // stage
            if (!errorOccurred.equals("")) {
                echo errorOccurred
            }
        } catch (e) {
            if (!errorOccurred.equals("")) {
                echo errorOccurred
                util.notifyBuildFailed()
                return
            }
            throw e
        } // try
    } // node
} // timeout

// trigger update_digests job if we have pushed new images that appear in the registry or metadata
// requires opm binary to filter & copy IIB images to quay, which only exists for amd64 (not s390x or ppc64le)
node("x86_64-rhel8"){ 
  stage ("Update registries and metadata") {
    sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/devspaces/'+ MIDSTM_BRANCH + '/product/util2.groovy')
    def util = load "${WORKSPACE}/util2.groovy"
    echo "currentBuild.result = " + currentBuild.result
    if (!currentBuild.result.equals("ABORTED") && !currentBuild.result.equals("FAILURE")) {
        DS_VERSION = util.getDsVersion(MIDSTM_BRANCH)
        println "DS_VERSION = '" + DS_VERSION + "'"
        JOB_BRANCH = util.getJobBranch(MIDSTM_BRANCH)

        // check if ${WORKSPACE}/LATEST_IMAGES.quay is different from stored LATEST_IMAGES
        // if LATEST_IMAGES files are different, run downstream job, if not, echo warning / set status yellow
        if (CONTAINERS.trim().contains("operator-bundle")) {
            println "NOTE: Skip scheduling update-digests for this update, as we have just updated operator-bundle."
            // currentBuild.description+="; update-digests NOT triggered"
        } else if (!DIFF_LATEST_IMAGES_QUAY_V_STORED.equals("")) {
            println "Scheduling update-digests for this update:"
            println DIFF_LATEST_IMAGES_QUAY_V_STORED
            jobPath='/job/DS_CI/job/update-digests_' + JOB_BRANCH
            final jobResult = build(
                job: jobPath.replaceAll("/job/","/"),
                wait: false,
                propagate: false,
                quietPeriod: 0,
                parameters: [
                    [
                        $class: 'StringParameterValue',
                        name: 'token',
                        value: "CI_BUILD"
                    ],
                    [
                        $class: 'StringParameterValue',
                        name: 'cause',
                        value: "push-latest-containers-to-quay+for+" + CONTAINERS.trim().replaceAll(" ","+") + "+by+${BUILD_TAG}"
                    ],
                    [
                        $class: 'BooleanParameterValue',
                        name: 'CLEAN_ON_FAILURE',
                        value: CLEAN_ON_FAILURE
                    ]
                ]
            )
            println("triggered build(" + jobPath + ") [no wait]")
            println("=?> Job ${JENKINS_URL}${jobPath} triggered.")
            currentBuild.description+="; <a href=${jobPath}/>" + jobPath + "</a> triggered" 
        } else {
            println "No changes to LATEST_IMAGES; no need to trigger update-digests " + DS_VERSION
            currentBuild.result = 'UNSTABLE'
            currentBuild.description+="; update-digests NOT triggered"
        }

        // CRW-2095 publish operator-bundle-generated too
        if (CONTAINERS.trim().equals("operator-bundle") || CONTAINERS.trim().matches(".*operator-bundle.*")) {
            // https://issues.redhat.com/browse/CRW-1564 if an update to operator-bundle, push new csv content into devspaces-images repo, 
            // in devspaces-operator-bundle-generated folder (outside where we sync from up->mid->down, as this should NOT
            // be synced to downstream or overwritten by upstream)
            SOURCE_REPO="redhat-developer/devspaces-images"
            println "####################################################################################################################"
            println "##  Clone and update github.com/${SOURCE_REPO}.git with latest Brew-generated CSV content (including pinned digests)"
            println "####################################################################################################################"

            whichBundle="operator-bundle"

            withCredentials([string(credentialsId:'crw_devstudio-release-token', variable: 'GITHUB_TOKEN')]) {
                util.cloneRepo("https://github.com/${SOURCE_REPO}.git", "sources", MIDSTM_BRANCH, false)
                sh(script: '''#!/bin/bash -xe
curl -sSLO https://raw.githubusercontent.com/redhat-developer/devspaces/'''+ MIDSTM_BRANCH + '''/product/updateGeneratedOperatorMetadata.sh
chmod +x updateGeneratedOperatorMetadata.sh
./updateGeneratedOperatorMetadata.sh -b ''' + MIDSTM_BRANCH + ''' -t ''' + DS_VERSION + ''' \
    -s ${WORKSPACE}/sources -d devspaces-''' + whichBundle + '''-generated -c quay.io/devspaces/devspaces-''' + whichBundle + '''
''')
            }
            currentBuild.description+="; " + whichBundle.replaceAll("operator-","") + "-generated updated"

            // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
            // NOTE: similar code in send-email-qe-build-list_3.*.jenkinsfile and push-latest-container-to-quay_3.*.jenkinsfile
            // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // // 
            println "####################################################################################################################"
            println "##  Check registry-proxy.engineering.redhat.com/rh-osbs/iib for " + whichBundle + " ${DS_VERSION}, for OCP ${OCP_VERSIONS}"
            println "####################################################################################################################"

            // $➔ ./getLatestImageTags.sh -b devspaces-3.0-rhel-8 --osbs --hide -c devspaces-operator-bundle --tag 3.0-
            // registry-proxy.engineering.redhat.com/rh-osbs/devspaces-operator-bundle:3.0-75
            def latestBundleImage = sh(script: '''#!/bin/bash
curl -sSLO https://raw.githubusercontent.com/redhat-developer/devspaces/''' + MIDSTM_BRANCH + '''/product/getLatestImageTags.sh && chmod +x getLatestImageTags.sh
./getLatestImageTags.sh -b ${MIDSTM_BRANCH} --osbs --hide -c devspaces-''' + whichBundle + ''' --tag ''' + DS_VERSION + '''-
''', returnStdout: true).trim()

            // registry-proxy.engineering.redhat.com/rh-osbs/iib:277491 (v4.11)
            // registry-proxy.engineering.redhat.com/rh-osbs/iib:277488 (v4.10) 
            def IIBs = sh(script: '''#!/bin/bash -xe
curl -sSLO https://raw.githubusercontent.com/redhat-developer/devspaces/''' + MIDSTM_BRANCH + '''/product/getLatestIIBs.sh && chmod +x getLatestIIBs.sh
for OCP_VER in ''' + OCP_VERSIONS + '''; do
    ./getLatestIIBs.sh --ds -t ''' + DS_VERSION + ''' -o ${OCP_VER} -i ''' + latestBundleImage + ''' | sed -r \
        -e "s#''' + latestBundleImage + '''\\t+##" \
        -e "s#(.+)\\t(.+)#\\1 (\\2)#"
done
''', returnStdout: true)

            def IIBsToQuay_matches = null

            // if we got the right number of values (matching number of OCP versions)
            if (IIBs?.trim() && OCP_VERSIONS?.trim() && IIBs?.trim().split("\n").length == OCP_VERSIONS?.trim().split(" ").length) { 
                println "####################################################################################################################FOUND\n\
##  IIB(s) found for latest " + whichBundle + " ${DS_VERSION}:\n\
## " + IIBs.trim().replaceAll("\n", "\n## ")+"\n\
####################################################################################################################FOUND\n"
                currentBuild.description+="; " + IIBs?.trim().split("\n").length + " IIB(s) found: "
                currentBuild.description+="<br/>* " + IIBs.trim().replaceAll("\n", "<br/>* ")

                // // // // // // // // // // // // // // // // // // // // // 
                // CRW-3219 copy IIBs to Quay, CI builds only (3 tags per IIB per OCP version)
                // // // // // // // // // // // // // // // // // // // // // 
                // requires opm binary to filter & copy IIB images to quay, which only exists for amd64 (not s390x or ppc64le)
                println("Filtering and copying images to quay. This may take ~3 mins per OCP version.")
                def IIBsToQuay = sh(script: '''#!/bin/bash -xe
curl -sSLO https://raw.githubusercontent.com/redhat-developer/devspaces/''' + MIDSTM_BRANCH + '''/product/copyIIBsToQuay.sh && chmod +x copyIIBsToQuay.sh
./copyIIBsToQuay.sh -v --push -t ''' + DS_VERSION + ''' -o "''' + OCP_VERSIONS + '''"
''', returnStdout: true)

                // in console, echo all errors and warnings
                println "####################################################################################################################COPIED\n\
##  IIB(s) copied:\n\
## " + IIBsToQuay.trim().replaceAll("\n", "\n## ")+"\n\
####################################################################################################################COPIED\n"

                currentBuild.description+="<br/> IIB(s) copied: "
                // for build description, collect the lines that start with [IMG]; ignore all other output
                IIBsToQuay_matches = ( IIBsToQuay =~ /\[IMG\] (quay.io.+)/ )
                (0..<IIBsToQuay_matches.count).each { 
                    currentBuild.description+="<br/>+ " + IIBsToQuay_matches[it][1] 
                }
                // return to the nullspace from whence it came (to avoid java.io.NotSerializableException java.util.regex.Matcher)
                // https://stackoverflow.com/questions/40454558/jenkins-pipeline-java-io-notserializableexception-java-util-regex-matcher-error
                IIBsToQuay_matches = null
            } else { // could not find the correct number of published IIBs in rh-osbs registry
                currentBuild.description+="; ERROR: missing rh-osbs/iib for " + latestBundleImage
                if (IIBs?.trim().split("\n").length > 0) { 
                    currentBuild.description+=" - " + IIBs?.trim().split("\n").length + " of " + OCP_VERSIONS?.trim().split(" ").length + " found: "
                    currentBuild.description+="<br/>* " + IIBs.trim().replaceAll("\n", "<br/>* ")
                }
                currentBuild.result = 'FAILURE'
            }
        } // if bundle
    } // if
    cleanWs(
        cleanWhenSuccess: true,
        cleanWhenUnstable: true,
        cleanWhenNotBuilt: false,
        cleanWhenFailure: CLEAN_ON_FAILURE,
        cleanWhenAborted: true,
        deleteDirs: true,
        disableDeferredWipeout: true,
        notFailBuild: true
    )
  } // stage
} //node

// https://issues.redhat.com/browse/CRW-1011 trigger theia-akamai job 
node(nodeLabel){ 
  stage ("Enable Akamai CDN support for DS Theia image") {
    sh('curl -sSLO https://raw.githubusercontent.com/redhat-developer/devspaces/'+ MIDSTM_BRANCH + '/product/util2.groovy')
    def util = load "${WORKSPACE}/util2.groovy"
    echo "currentBuild.result = " + currentBuild.result
    if (!currentBuild.result.equals("ABORTED") && !currentBuild.result.equals("FAILURE")) {
        // if CONTAINERS contains theia
        println "Containers: " + CONTAINERS.trim()
        if (CONTAINERS.trim().equals("theia") || CONTAINERS.trim().matches(".*theia .*")) {
            DS_VERSION = util.getDsVersion(MIDSTM_BRANCH)
            println "DS_VERSION = '" + DS_VERSION + "'"
            println "Scheduling theia-akamai"
            JOB_BRANCH = util.getJobBranch(MIDSTM_BRANCH)
            jobPath='/job/DS_CI/job/theia-akamai_' + JOB_BRANCH
            final jobResult = build(
                job: jobPath.replaceAll("/job/","/"),
                wait: false,
                propagate: false,
                quietPeriod: 0,
                parameters: [
                    [
                        $class: 'StringParameterValue',
                        name: 'token',
                        value: "CI_BUILD"
                    ],
                    [
                        $class: 'StringParameterValue',
                        name: 'cause',
                        value: "theia-akamai+for+" + CONTAINERS.trim().replaceAll(" ","+") + "+by+${BUILD_TAG}"
                    ],
                    [
                        $class: 'BooleanParameterValue',
                        name: 'CLEAN_ON_FAILURE',
                        value: CLEAN_ON_FAILURE
                    ]
                ]
            )
            println("triggered build(" + jobPath + ") [no wait]")
            println("=?> Job ${JENKINS_URL}${jobPath} triggered.")
            currentBuild.description+="; <a href=${jobPath}/>" + jobPath + "</a> triggered" 
        } // if 2
    } // if
    cleanWs(
        cleanWhenSuccess: true,
        cleanWhenUnstable: true,
        cleanWhenNotBuilt: false,
        cleanWhenFailure: CLEAN_ON_FAILURE,
        cleanWhenAborted: true,
        deleteDirs: true,
        disableDeferredWipeout: true,
        notFailBuild: true
    )
  } // stage
} //node
